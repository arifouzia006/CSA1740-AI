from collections import deque

def is_valid(state):
    """Check if a state is valid (i.e., no more cannibals than missionaries on either side)"""
    M1, C1, B1, M2, C2, B2 = state
    if M1 < 0 or C1 < 0 or M2 < 0 or C2 < 0:
        return False
    if M1 > 0 and C1 > M1:
        return False
    if M2 > 0 and C2 > M2:
        return False
    return True

def is_goal(state):
    """Check if a state is the goal state"""
    return state == (0, 0, 0, 3, 3, 1)

def get_successors(state):
    """Generate successors for a given state"""
    M1, C1, B1, M2, C2, B2 = state
    successors = []
    
    if B1 == 1:  # Boat on the original side
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            new_state = (M1 - m, C1 - c, 0, M2 + m, C2 + c, 1)
            if is_valid(new_state):
                successors.append(new_state)
    else:  # Boat on the other side
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            new_state = (M1 + m, C1 + c, 1, M2 - m, C2 - c, 0)
            if is_valid(new_state):
                successors.append(new_state)
    
    return successors

def bfs():
    """Breadth-First Search to solve the Missionaries and Cannibals problem"""
    start_state = (3, 3, 1, 0, 0, 0)  # (M1, C1, B1, M2, C2, B2)
    queue = deque([(start_state, [])])
    visited = set()
    visited.add(start_state)
    
    while queue:
        current_state, path = queue.popleft()
        
        if is_goal(current_state):
            return path + [current_state]
        
        for successor in get_successors(current_state):
            if successor not in visited:
                visited.add(successor)
                queue.append((successor, path + [current_state]))
    
    return None

def print_solution(solution):
    """Print the solution path"""
    if solution:
        print("Solution found!")
        for step in solution:
            print(step)
    else:
        print("No solution found.")

# Find and print the solution
solution = bfs()
print_solution(solution)
