from collections import deque

def is_valid(state, capacities):
    return 0 <= state[0] <= capacities[0] and 0 <= state[1] <= capacities[1]

def get_successors(state, capacities):
    successors = []
    jug1, jug2 = state
    cap1, cap2 = capacities

    # Fill Jug1
    successors.append((cap1, jug2))
    # Fill Jug2
    successors.append((jug1, cap2))
    # Empty Jug1
    successors.append((0, jug2))
    # Empty Jug2
    successors.append((jug1, 0))
    # Pour Jug1 to Jug2
    pour = min(jug1, cap2 - jug2)
    successors.append((jug1 - pour, jug2 + pour))
    # Pour Jug2 to Jug1
    pour = min(jug2, cap1 - jug1)
    successors.append((jug1 + pour, jug2 - pour))

    return [s for s in successors if is_valid(s, capacities)]

def bfs(capacities, start, goal):
    queue = deque([start])
    visited = set()
    parent = {start: None}

    while queue:
        current = queue.popleft()
        if current in visited:
            continue
        visited.add(current)

        if current == goal:
            path = []
            while current:
                path.append(current)
                current = parent[current]
            return path[::-1]

        for next_state in get_successors(current, capacities):
            if next_state not in visited:
                queue.append(next_state)
                parent[next_state] = current

    return None

def print_path(path):
    for step in path:
        print(step)

def solve_water_jug_problem(jug1_capacity, jug2_capacity, target):
    capacities = (jug1_capacity, jug2_capacity)
    start = (0, 0)
    goal_states = [(target, 0), (0, target), (target, jug2_capacity), (jug1_capacity, target)]
    
    for goal in goal_states:
        path = bfs(capacities, start, goal)
        if path:
            print(f"Solution found for target {target}:")
            print_path(path)
            return path

    print(f"No solution found for target {target}.")
    return None

# Example usage:
solve_water_jug_problem(4, 3, 2)
