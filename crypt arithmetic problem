from constraint import Problem, AllDifferentConstraint

def solve_cryptarithmetic():
    # Initialize the problem
    problem = Problem()

    # Define variables and their domains
    letters = "SENDMORY"
    problem.addVariables(letters, range(10))

    # Apply the constraint that all letters must be different
    problem.addConstraint(AllDifferentConstraint(), letters)

    # Apply constraints for the specific problem SEND + MORE = MONEY
    # S, M cannot be 0 because they are leading digits
    problem.addConstraint(lambda S: S != 0, "S")
    problem.addConstraint(lambda M: M != 0, "M")

    # Define the equation SEND + MORE = MONEY
    def cryptarithmetic_constraint(S, E, N, D, M, O, R, Y):
        send = 1000 * S + 100 * E + 10 * N + D
        more = 1000 * M + 100 * O + 10 * R + E
        money = 10000 * M + 1000 * O + 100 * N + 10 * E + Y
        return send + more == money

    # Add the constraint to the problem
    problem.addConstraint(cryptarithmetic_constraint, "SENDMORY")

    # Get solutions
    solutions = problem.getSolutions()

    if solutions:
        for solution in solutions:
            send = 1000 * solution['S'] + 100 * solution['E'] + 10 * solution['N'] + solution['D']
            more = 1000 * solution['M'] + 100 * solution['O'] + 10 * solution['R'] + solution['E']
            money = 10000 * solution['M'] + 1000 * solution['O'] + 100 * solution['N'] + 10 * solution['E'] + solution['Y']
            print(f"SEND + MORE = MONEY")
            print(f"{send} + {more} = {money}")
            print("Solution:")
            for letter in letters:
                print(f"{letter} = {solution[letter]}")
    else:
        print("No solution found")

# Solve the cryptarithmetic problem
solve_cryptarithmetic()
