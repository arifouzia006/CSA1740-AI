import heapq
import numpy as np

class PuzzleState:
    def __init__(self, board, goal, g=0, h=None, parent=None):
        self.board = np.array(board)
        self.goal = np.array(goal)
        self.g = g  # Cost from start to current state
        self.h = h if h is not None else self.manhattan_distance()
        self.f = self.g + self.h  # Total estimated cost
        self.parent = parent

    def manhattan_distance(self):
        distance = 0
        for x in range(1, 9):
            ix, iy = np.where(self.board == x)
            gx, gy = np.where(self.goal == x)
            distance += abs(ix - gx) + abs(iy - gy)
        return distance

    def get_neighbors(self):
        neighbors = []
        x, y = np.where(self.board == 0)
        x, y = int(x), int(y)
        directions = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
        
        for dx, dy in directions:
            if 0 <= dx < 3 and 0 <= dy < 3:
                new_board = self.board.copy()
                new_board[x, y], new_board[dx, dy] = new_board[dx, dy], new_board[x, y]
                neighbors.append(PuzzleState(new_board, self.goal, self.g + 1, parent=self))
        return neighbors

    def __lt__(self, other):
        return self.f < other.f

    def __eq__(self, other):
        return np.array_equal(self.board, other.board)

    def __hash__(self):
        return hash(str(self.board))

def a_star_search(start, goal):
    open_set = []
    heapq.heappush(open_set, start)
    closed_set = set()

    while open_set:
        current = heapq.heappop(open_set)

        if np.array_equal(current.board, goal):
            return reconstruct_path(current)

        closed_set.add(current)

        for neighbor in current.get_neighbors():
            if neighbor in closed_set:
                continue

            if neighbor not in open_set or neighbor.g < current.g:
                heapq.heappush(open_set, neighbor)
                neighbor.parent = current

    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state)
        state = state.parent
    return path[::-1]

def print_board(board):
    for row in board:
        print(' '.join(str(cell) if cell != 0 else ' ' for cell in row))
    print()

# Define the start and goal states
start_board = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

goal_board = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

start_state = PuzzleState(start_board, goal_board)
goal_state = PuzzleState(goal_board, goal_board)

solution_path = a_star_search(start_state, goal_state.board)

if solution_path:
    print("Solution found!")
    for state in solution_path:
        print_board(state.board)
else:
    print("No solution found.")
